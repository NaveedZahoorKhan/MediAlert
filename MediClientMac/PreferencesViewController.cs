// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.IO;

namespace MediClientMac
{
	public partial class PreferencesViewController : NSViewController
	{
		public PreferencesViewController(IntPtr handle) : base(handle)
		{

			Clients clt = GetLatestClient();
			if (clt != null)
			{
				txtOk.StringValue = clt.OkMessage;
				txtAlert.StringValue = clt.AlertMessage;
				txtClientName.StringValue = clt.ClientName;
				txtCurrentIP.StringValue = clt.ipadd;
				txtServerIP.StringValue = clt.ServerIP;
				if (!string.IsNullOrEmpty(clt.ModifierCode))
				{
					comboBox1.Add(new NSString(clt.ModifierCode));
				}
				if (!string.IsNullOrEmpty(clt.KeyHashCode))
				{
					comboBox2.Add(new NSString(clt.KeyHashCode));
				}
				if (clt.MessageMode == "Alert")
				{
					alert_button_outlet.SelectedCell.State = NSCellStateValue.On;
				}
				else
					if (clt.MessageMode == "Ok")
				{
					ok_button_outlet.SelectedCell.State = NSCellStateValue.On;
				}
				else
						if (clt.MessageMode == "Both")
				{
					both_button_outlet.SelectedCell.State = NSCellStateValue.On;
				}
			}
		}
		public PreferencesViewController()
		{
		}

		//RegistryKey rkApp = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
		public static string OkMessage = "";
		public static string AlertMessage = "";
		public static string MessageMode = "";
		string filename = "MediText.mdl";
		public Clients GetLatestClient()
		{
			Clients clt = new Clients();
			string fileData = FileHelper.ReadFileData(filename);
			if (!string.IsNullOrEmpty(fileData))
			{
				clt = JsonHelper<Clients>.JsonDeserialize(fileData);
			}
			else
			{
				clt = null;
			}
			return clt;
		}
		partial void checkBox1(NSObject sender)
		{

			if (checkBox1_outlet.State == NSCellStateValue.On)
			{
				// Add the value in the registry so that the application runs at startup
				//rkApp.SetValue("MyApp", Application.ExecutablePath);
			}
			else
			{
				// Remove the value from the registry so that the application doesn't start
				//rkApp.DeleteValue("MyApp", false);
			}

		}

		partial void button1(NSObject sender)
		{
			if (string.IsNullOrEmpty(txtOk.StringValue))
			{
				NSAlert nSAlerts = new NSAlert();
				nSAlerts.MessageText = "Please enter Ok Message";
				nSAlerts.RunModal();
				return;
			}
			if (string.IsNullOrEmpty(txtAlert.StringValue))
			{
				NSAlert nSAlertd = new NSAlert();
				nSAlertd.MessageText = "Please enter Alert Message";
				nSAlertd.RunModal();
				return;
			}
			if (alert_button_outlet.State == NSCellStateValue.On)
			{
				MessageMode = "Alert";
			}
			else
				if (ok_button_outlet.SelectedCell.State == NSCellStateValue.On)
			{
				MessageMode = "Ok";
			}
			else
				if (both_button_outlet.SelectedCell.State == NSCellStateValue.On)
			{
				MessageMode = "Both";
			}


			Clients clt = GetLatestClient();
			if (clt != null)
			{
				clt.AlertMessage = txtAlert.StringValue;
				clt.OkMessage = txtOk.StringValue;
				clt.MessageMode = MessageMode;
			}
			else
			{
				clt = new Clients();
				clt.AlertMessage = txtAlert.StringValue;
				clt.OkMessage = txtOk.StringValue;
				clt.MessageMode = MessageMode;
			}
			WriteJsonFile(clt);
			NSAlert nSAlert = new NSAlert();
			nSAlert.MessageText = ("Settings saved successfully.");
			nSAlert.RunModal();
		}

		partial void button2(NSObject sender)
		{


		}

		private void Preferences_Load(object sender, EventArgs e)
		{
		}

		[DllImport("user32.dll", SetLastError = true)]
		static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
		[DllImport("user32.dll")]
		public static extern bool UnregisterHotKey(IntPtr hWnd, int id);

		enum KeyModifier
		{
			None = 0,
			Alt = 1,
			Control = 2,
			Shift = 4,
			WinKey = 8
		}

		public IntPtr GetWindowHandle(string wName)
		{
			IntPtr hWnd = IntPtr.Zero;
			foreach (Process pList in Process.GetProcesses())
			{
				if (pList.MainWindowTitle.Contains(wName))
				{
					hWnd = pList.MainWindowHandle;
				}
			}
			return hWnd;
		}

		private void button3_Click(object sender, EventArgs e)
		{
			Clients clt = GetLatestClient();
			if (clt == null)
			{
				clt = new Clients();
				clt.ClientName = txtClientName.StringValue;
				WriteJsonFile(clt);
			}
			else
			{
				clt.ClientName = txtClientName.StringValue;
				WriteJsonFile(clt);
			}
			ClientFormViewController cltr = new ClientFormViewController();
			IntPtr ptrData = new IntPtr(Convert.ToInt32(clt.LastHandle));
			cltr.UnRegisterKey(ptrData);

			string winHandle = cltr.RegisterKey(comboBox1.SelectedValue.ToString(), comboBox2.SelectedValue.ToString());

			clt = GetLatestClient();
			if (clt == null)
			{
				clt = new Clients();
				clt.ModifierCode = comboBox1.SelectedValue.ToString();
				clt.KeyHashCode = comboBox2.SelectedValue.ToString();
				clt.LastHandle = winHandle.ToString();
				WriteJsonFile(clt);
			}
			else
			{
				clt.ModifierCode = comboBox1.SelectedValue.ToString();
				clt.KeyHashCode = comboBox2.SelectedValue.ToString();
				clt.LastHandle = winHandle.ToString();
				WriteJsonFile(clt);
			}
			NSAlert nSAlert = new NSAlert();
			nSAlert.MessageText = ("Client name saved succesfully.");
			nSAlert.RunModal();
		}

		public void WriteJsonFile(Clients clt)
		{
			if (File.Exists(filename))
			{
				string fileData = FileHelper.ReadFileData(filename);
				string jsondata;
				if (string.IsNullOrEmpty(fileData))
				{
					jsondata = JsonHelper<Clients>.JsonSerializer(clt);
				}
				else
				{
					FileHelper.FlushFile(filename);
					jsondata = JsonHelper<Clients>.JsonSerializer(clt);
				}
				FileHelper.WriteFileData(filename, jsondata);
			}
			else
			{
				using (var stream = File.Create(filename)) { }
				string fileData = FileHelper.ReadFileData(filename);
				string jsondata;
				if (string.IsNullOrEmpty(fileData))
				{
					jsondata = JsonHelper<Clients>.JsonSerializer(clt);
				}
				else
				{
					FileHelper.FlushFile(filename);
					jsondata = JsonHelper<Clients>.JsonSerializer(clt);
				}
				FileHelper.WriteFileData(filename, jsondata);

			}
		}

		private void button4_Click(object sender, EventArgs e)
		{
			try
			{
				Clients clt = GetLatestClient();
				clt.ipadd = txtCurrentIP.StringValue;
				WriteJsonFile(clt);
				ViewController.IpAddressVal = clt.ipadd;

				NSAlert nSAlert = new NSAlert();
				nSAlert.MessageText = ("Current client ip updated successfully.");
				nSAlert.RunModal();
			}
			catch
			{

				NSAlert nSAlert = new NSAlert();
				nSAlert.MessageText = ("Some error occured while updating current ip.");
				nSAlert.RunModal();
			}
		}

		private void button5_Click(object sender, EventArgs e)
		{
			try
			{
				Clients clt = GetLatestClient();
				clt.ServerIP = txtServerIP.StringValue;
				WriteJsonFile(clt);
				ViewController.ServerIpAddress = clt.ServerIP;

				NSAlert nSAlert = new NSAlert();
				nSAlert.MessageText = ("Server ip updated successfully.");
				nSAlert.RunModal();

			}
			catch
			{
				NSAlert nSAlert = new NSAlert();
				nSAlert.MessageText = ("Some error occured while updating server ip.");
				nSAlert.RunModal();
			}
		}

	}
}
